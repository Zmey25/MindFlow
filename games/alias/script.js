document.addEventListener('DOMContentLoaded', () => {
    // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
    const screens = {
        settings: document.getElementById('settings-screen'),
        turnStart: document.getElementById('turn-start-screen'),
        game: document.getElementById('game-screen'),
        roundEnd: document.getElementById('round-end-screen'),
        scoreboard: document.getElementById('scoreboard-screen'),
        gameOver: document.getElementById('game-over-screen'),
    };

    const settingsForm = {
        wordSet: document.getElementById('word-set'),
        diffEasy: document.getElementById('diff-easy'),
        diffMedium: document.getElementById('diff-medium'),
        diffHard: document.getElementById('diff-hard'),
        numTeams: document.getElementById('num-teams'),
        teamNamesContainer: document.getElementById('team-names-container'),
        roundTime: document.getElementById('round-time'),
        winScore: document.getElementById('win-score'),
        startGameBtn: document.getElementById('start-game-btn')
    };

    const turnStartElements = {
        teamNameLabel: document.getElementById('turn-start-team-name'),
        explainerCall: document.getElementById('explainer-call'),
        beginRoundBtn: document.getElementById('begin-round-btn'),
        showScoresInterimBtn: document.getElementById('show-scores-interim-btn'),
        currentTeamTurnLabel: document.getElementById('current-team-turn-label')
    };

    const gameElements = {
        timerDisplay: document.getElementById('timer'),
        currentRoundScoreDisplay: document.getElementById('current-round-score'),
        wordDisplay: document.getElementById('word-to-explain'),
        guessedBtn: document.getElementById('guessed-btn'),
        skipBtn: document.getElementById('skip-btn')
    };

    const roundEndElements = {
        teamName: document.getElementById('round-end-team-name'),
        score: document.getElementById('round-end-score'),
        guessedWordsList: document.getElementById('guessed-words-list'),
        skippedWordsList: document.getElementById('skipped-words-list'),
        nextTurnBtn: document.getElementById('next-turn-btn'),
        showScoresFinalBtn: document.getElementById('show-scores-final-btn')
    };
    
    const scoreboardElements = {
        scoresDisplay: document.getElementById('scores-display'),
        continueGameBtn: document.getElementById('continue-game-btn'),
        mainMenuBtn: document.getElementById('main-menu-btn')
    };

    const gameOverElements = {
        winnerAnnouncement: document.getElementById('winner-announcement'),
        winningTeamName: document.getElementById('winning-team-name'),
        finalScoresDisplay: document.getElementById('final-scores-display'),
        playAgainBtn: document.getElementById('play-again-btn')
    };
    
    const loadingIndicator = document.getElementById('loading-indicator');
    const errorMessage = document.getElementById('error-message');

    // –°—Ç–∞–Ω –≥—Ä–∏
    let allWords = [];
    let currentWordsPool = [];
    let currentWordIndex = 0;
    let gameSettings = {};
    let teamData = []; // { name: '–ö–æ–º–∞–Ω–¥–∞ 1', score: 0, playerIndex: 0 }
    let currentTeamIdx = 0;
    let timerInterval;
    let timeLeft = 0;
    let currentRoundScore = 0;
    let roundGuessedWords = [];
    let roundSkippedWords = [];
    const teamColors = ['#FF6347', '#4682B4', '#3CB371', '#FFD700']; // –¢–æ–º–∞—Ç–Ω–∏–π, –°—Ç–∞–ª–µ–≤–æ-—Å–∏–Ω—ñ–π, –ú–æ—Ä—Å—å–∫–∞ –∑–µ–ª–µ–Ω—å, –ó–æ–ª–æ—Ç–∏–π


    // –§—É–Ω–∫—Ü—ñ—ó
    function showScreen(screenId) {
        Object.values(screens).forEach(screen => screen.classList.remove('active'));
        screens[screenId].classList.add('active');
    }
    
    function displayError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        loadingIndicator.style.display = 'none';
        setTimeout(() => errorMessage.style.display = 'none', 5000);
    }

    function updateTeamNameInputs() {
        const num = parseInt(settingsForm.numTeams.value);
        settingsForm.teamNamesContainer.innerHTML = '';
        for (let i = 0; i < num; i++) {
            const div = document.createElement('div');
            div.classList.add('form-group');
            const label = document.createElement('label');
            label.setAttribute('for', `team-name-${i}`);
            label.textContent = `–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ ${i + 1} üö©:`;
            const input = document.createElement('input');
            input.type = 'text';
            input.id = `team-name-${i}`;
            input.value = `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`;
            input.required = true;
            div.appendChild(label);
            div.appendChild(input);
            settingsForm.teamNamesContainer.appendChild(div);
        }
    }
    settingsForm.numTeams.addEventListener('change', updateTeamNameInputs);
    updateTeamNameInputs(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ

    async function fetchWords() {
        const sheetName = settingsForm.wordSet.value;
        loadingIndicator.style.display = 'block';
        errorMessage.style.display = 'none';
        try {
            const response = await fetch(`../get_sheet_data.php?sheetName=${encodeURIComponent(sheetName)}`);
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
            }
            allWords = await response.json();
            if (!Array.isArray(allWords) || allWords.length === 0) {
                 throw new Error("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ —Ñ–∞–π–ª —Å–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            }
            loadingIndicator.style.display = 'none';
            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤:', error);
            displayError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ª–æ–≤–∞: ${error.message}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É —Ç–∞ –π–æ–≥–æ –≤–º—ñ—Å—Ç.`);
            return false;
        }
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    function prepareWordPool() {
        const selectedDifficulties = [];
        if (settingsForm.diffEasy.checked) selectedDifficulties.push("Easy");
        if (settingsForm.diffMedium.checked) selectedDifficulties.push("Medium");
        if (settingsForm.diffHard.checked) selectedDifficulties.push("Hard");

        if(selectedDifficulties.length === 0){
            displayError("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ.");
            return false; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ false, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É
        }

        currentWordsPool = allWords.reduce((acc, wordObj) => {
            selectedDifficulties.forEach(diff => {
                if (wordObj[diff]) {
                    acc.push(wordObj[diff]);
                }
            });
            return acc;
        }, []);

        if (currentWordsPool.length === 0) {
            displayError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.");
            return false; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ false, —è–∫—â–æ –Ω–µ–º–∞—î —Å–ª—ñ–≤
        }
        shuffleArray(currentWordsPool);
        currentWordIndex = 0;
        return true; // –í—Å–µ –¥–æ–±—Ä–µ
    }

    async function startGame() {
        gameSettings = {
            wordSet: settingsForm.wordSet.value,
            difficulties: {
                easy: settingsForm.diffEasy.checked,
                medium: settingsForm.diffMedium.checked,
                hard: settingsForm.diffHard.checked
            },
            numTeams: parseInt(settingsForm.numTeams.value),
            roundTime: parseInt(settingsForm.roundTime.value),
            winScore: parseInt(settingsForm.winScore.value)
        };
        
        if (!gameSettings.difficulties.easy && !gameSettings.difficulties.medium && !gameSettings.difficulties.hard) {
            displayError("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ.");
            return;
        }

        const wordsLoaded = await fetchWords();
        if (!wordsLoaded) return; // –ó—É–ø–∏–Ω–∫–∞, —è–∫—â–æ —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ

        if (!prepareWordPool()) return; // –ó—É–ø–∏–Ω–∫–∞, —è–∫—â–æ –Ω–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ

        teamData = [];
        for (let i = 0; i < gameSettings.numTeams; i++) {
            const teamNameInput = document.getElementById(`team-name-${i}`);
            teamData.push({ 
                name: teamNameInput ? teamNameInput.value : `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`, 
                score: 0,
                playerIndex: 0, // –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è, —Ö—Ç–æ –ø–æ—è—Å–Ω—é—î –Ω–∞—Å—Ç—É–ø–Ω–∏–º (—è–∫—â–æ —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏)
                color: teamColors[i % teamColors.length]
            });
        }
        currentTeamIdx = 0;
        showTurnStartScreen();
    }

    function showTurnStartScreen() {
        const currentTeam = teamData[currentTeamIdx];
        turnStartElements.teamNameLabel.textContent = currentTeam.name;
        turnStartElements.teamNameLabel.style.color = currentTeam.color;
        turnStartElements.explainerCall.textContent = currentTeam.name; // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ "–ì—Ä–∞–≤–µ—Ü—å X –∑ –∫–æ–º–∞–Ω–¥–∏ Y"
        turnStartElements.currentTeamTurnLabel.style.color = currentTeam.color;
        showScreen('turnStart');
    }

    function beginRound() {
        if (!prepareWordPool()) { // –ü–µ—Ä–µ–ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª—ñ–≤ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
            showScreen('settings'); // –ê–±–æ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            return;
        }
        currentRoundScore = 0;
        roundGuessedWords = [];
        roundSkippedWords = [];
        gameElements.currentRoundScoreDisplay.textContent = `–ë–∞–ª–∏ –∑–∞ —Ä–∞—É–Ω–¥: ${currentRoundScore}`;
        timeLeft = gameSettings.roundTime;
        updateTimerDisplay();
        displayNextWord();
        showScreen('game');
        startTimer();
    }

    function startTimer() {
        clearInterval(timerInterval);
        timerInterval = setInterval(() => {
            timeLeft--;
            updateTimerDisplay();
            if (timeLeft <= 0) {
                endRound();
            }
        }, 1000);
    }

    function stopTimer() {
        clearInterval(timerInterval);
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        gameElements.timerDisplay.textContent = `‚è≥ ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        if (timeLeft <= 10 && timeLeft > 0) { // –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 —Å–µ–∫—É–Ω–¥
            gameElements.timerDisplay.style.color = 'white';
            gameElements.timerDisplay.style.backgroundColor = '#D32F2F'; // –¢–µ–º–Ω–æ-—á–µ—Ä–≤–æ–Ω–∏–π
        } else {
            gameElements.timerDisplay.style.color = 'white';
            gameElements.timerDisplay.style.backgroundColor = '#FF6347'; // –¢–æ–º–∞—Ç–Ω–∏–π
        }
    }

    function displayNextWord() {
        if (currentWordIndex < currentWordsPool.length) {
            gameElements.wordDisplay.textContent = currentWordsPool[currentWordIndex];
        } else {
            gameElements.wordDisplay.textContent = "–°–ª–æ–≤–∞ —Å–∫—ñ–Ω—á–∏–ª–∏—Å—å! üòÆ";
            // –ú–æ–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–∞—É–Ω–¥ –∞–±–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
            gameElements.guessedBtn.disabled = true;
            gameElements.skipBtn.disabled = true;
        }
    }

    function handleGuessed() {
        if (currentWordIndex < currentWordsPool.length) {
            currentRoundScore++;
            teamData[currentTeamIdx].score++;
            roundGuessedWords.push(currentWordsPool[currentWordIndex]);
            gameElements.currentRoundScoreDisplay.textContent = `–ë–∞–ª–∏ –∑–∞ —Ä–∞—É–Ω–¥: ${currentRoundScore}`;
            currentWordIndex++;
            displayNextWord();
            checkWinCondition();
        }
    }

    function handleSkip() {
        if (currentWordIndex < currentWordsPool.length) {
            // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: teamData[currentTeamIdx].score--; // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫
            roundSkippedWords.push(currentWordsPool[currentWordIndex]);
            currentWordIndex++;
            displayNextWord();
        }
    }
    
    function renderList(listElement, wordsArray) {
        listElement.innerHTML = '';
        if (wordsArray.length === 0) {
            const li = document.createElement('li');
            li.textContent = "–ù–µ–º–∞—î";
            listElement.appendChild(li);
        } else {
            wordsArray.forEach(word => {
                const li = document.createElement('li');
                li.textContent = word;
                listElement.appendChild(li);
            });
        }
    }


    function endRound() {
        stopTimer();
        gameElements.guessedBtn.disabled = false; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω
        gameElements.skipBtn.disabled = false;

        roundEndElements.teamName.textContent = teamData[currentTeamIdx].name;
        roundEndElements.teamName.style.color = teamData[currentTeamIdx].color;
        roundEndElements.score.textContent = currentRoundScore;
        
        renderList(roundEndElements.guessedWordsList, roundGuessedWords);
        renderList(roundEndElements.skippedWordsList, roundSkippedWords);

        showScreen('roundEnd');
    }

    function checkWinCondition() {
        const winner = teamData.find(team => team.score >= gameSettings.winScore);
        if (winner) {
            showGameOverScreen(winner);
            return true;
        }
        return false;
    }

    function nextTurn() {
        if (checkWinCondition()) return;

        currentTeamIdx = (currentTeamIdx + 1) % gameSettings.numTeams;
        showTurnStartScreen();
    }
    
    function updateScoresDisplay(container) {
        container.innerHTML = '';
        const sortedTeams = [...teamData].sort((a, b) => b.score - a.score);
        sortedTeams.forEach(team => {
            const teamDiv = document.createElement('div');
            teamDiv.classList.add('team-score-item');
            
            const nameSpan = document.createElement('span');
            nameSpan.classList.add('team-name');
            nameSpan.textContent = `${team.name}: `;
            nameSpan.style.color = team.color;
            
            const scoreSpan = document.createElement('span');
            scoreSpan.classList.add('score-value');
            scoreSpan.textContent = team.score;
            
            teamDiv.appendChild(nameSpan);
            teamDiv.appendChild(scoreSpan);
            container.appendChild(teamDiv);
        });
    }

    function showScoreboard() {
        updateScoresDisplay(scoreboardElements.scoresDisplay);
        showScreen('scoreboard');
    }


    function showGameOverScreen(winner) {
        gameOverElements.winningTeamName.textContent = winner.name;
        gameOverElements.winningTeamName.style.color = winner.color;
        gameOverElements.winnerAnnouncement.style.borderColor = winner.color; // –Ø–∫—â–æ —î —Ä–∞–º–∫–∞
        updateScoresDisplay(gameOverElements.finalScoresDisplay);
        showScreen('gameOver');
    }

    function resetGame() {
        allWords = [];
        currentWordsPool = [];
        currentWordIndex = 0;
        gameSettings = {};
        teamData = [];
        currentTeamIdx = 0;
        stopTimer();
        timeLeft = 0;
        currentRoundScore = 0;
        // –°–∫–∏–Ω—É—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ,
        // –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —ó—Ö –∑–Ω–æ–≤—É.
        // settingsForm.numTeams.value = 2; // –ü—Ä–∏–∫–ª–∞–¥
        // updateTeamNameInputs();
        showScreen('settings');
    }

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    settingsForm.startGameBtn.addEventListener('click', startGame);
    turnStartElements.beginRoundBtn.addEventListener('click', beginRound);
    turnStartElements.showScoresInterimBtn.addEventListener('click', showScoreboard);

    gameElements.guessedBtn.addEventListener('click', handleGuessed);
    gameElements.skipBtn.addEventListener('click', handleSkip);

    roundEndElements.nextTurnBtn.addEventListener('click', nextTurn);
    roundEndElements.showScoresFinalBtn.addEventListener('click', showScoreboard);
    
    scoreboardElements.continueGameBtn.addEventListener('click', () => {
        // –Ø–∫—â–æ –≥—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–∞—î –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏ –∞–±–æ –º–∞—î –±—É—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞
        if (teamData.some(team => team.score >= gameSettings.winScore)) {
            // –ú–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω Game Over, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –±—É–≤ –ø–æ–∫–∞–∑–∞–Ω–∏–π
            const winner = teamData.find(team => team.score >= gameSettings.winScore);
            if (winner) showGameOverScreen(winner);
        } else {
            showTurnStartScreen(); // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –µ–∫—Ä–∞–Ω—É –ø–µ—Ä–µ–¥–∞—á—ñ —Ö–æ–¥—É
        }
    });
    scoreboardElements.mainMenuBtn.addEventListener('click', resetGame);


    gameOverElements.playAgainBtn.addEventListener('click', resetGame);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    showScreen('settings');
});