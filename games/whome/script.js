document.addEventListener('DOMContentLoaded', () => {
    const LOCAL_DATA_PROVIDER_URL = '../get_sheet_data.php';
    const GAME_ROLES_SHEET_NAME = 'whome';

    // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
    const screens = {
        setup: document.getElementById('setup-screen'),
        roleAssignment: document.getElementById('role-assignment-screen'),
        gamePlay: document.getElementById('game-play-screen'),
        results: document.getElementById('results-screen'),
    };

    const numPlayersInput = document.getElementById('num-players');
    const difficultySelect = document.getElementById('difficulty');
    const startGameBtn = document.getElementById('start-game-btn');
    const errorMessage = document.getElementById('error-message');

    const playerTurnInfo = document.getElementById('player-turn-info');
    const lookAwayText = document.getElementById('look-away-text');
    const showRoleBtn = document.getElementById('show-role-btn');
    const roleDisplayArea = document.getElementById('role-display-area');
    const currentRoleText = document.getElementById('current-role');
    const roleSeenBtn = document.getElementById('role-seen-btn');

    const timerDisplay = document.getElementById('timer-display');
    const endGameEarlyBtn = document.getElementById('end-game-early-btn');

    const rolesRevealList = document.getElementById('roles-reveal-list');
    const playAgainBtn = document.getElementById('play-again-btn');
    const alarmSound = document.getElementById('alarm-sound');

    // –°—Ç–∞–Ω –≥—Ä–∏
    let numPlayers = 0;
    let difficulty = '';
    let allRoles = [];
    let assignedRoles = []; // [{ player: 1, role: "–†–æ–ª—å1" }, ...]
    let currentPlayerIndexForRole = 0;
    let timerInterval;
    let timeLeft = 10 * 60; // 10 —Ö–≤–∏–ª–∏–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    // –§—É–Ω–∫—Ü—ñ—ó
    function switchScreen(activeScreen) {
        for (const screenKey in screens) {
            screens[screenKey].classList.remove('active');
        }
        screens[activeScreen].classList.add('active');
    }

    async function fetchRoles() {
        errorMessage.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–ª–µ–π... ‚è≥';
        try {
            // –ó–∞–ø–∏—Ç –¥–æ –Ω–∞—à–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PHP-—Å–∫—Ä–∏–ø—Ç–∞
            const response = await fetch(`${LOCAL_DATA_PROVIDER_URL}?sheetName=${encodeURIComponent(GAME_ROLES_SHEET_NAME)}`);
            
            if (!response.ok) {
                let errorMsg = `–ü–æ–º–∏–ª–∫–∞ ${response.status}: ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    if (errorData && errorData.message) {
                        errorMsg = errorData.message;
                    }
                } catch (e) { /* —ñ–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ JSON */ }
                throw new Error(errorMsg);
            }

            const rolesDataFromSheet = await response.json(); // –¶–µ –≤–∂–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ [{...}, ...]

            if (!Array.isArray(rolesDataFromSheet)) {
                 throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–ª–µ–π.');
            }

            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–æ–ª—ñ –∑–∞ –æ–±—Ä–∞–Ω–æ—é —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é.
            // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ `difficulty` ("Easy", "Medium", "Hard") - —Ü–µ –∫–ª—é—á –≤ –æ–±'—î–∫—Ç–∞—Ö rolesDataFromSheet
            const difficultyKey = difficulty; // "Easy", "Medium", "Hard"
            allRoles = rolesDataFromSheet
                .map(item => item[difficultyKey]) // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
                .filter(role => role && typeof role === 'string' && role.trim() !== ''); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–µ —Ä—è–¥–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

            if (allRoles.length === 0) {
                if (rolesDataFromSheet.length > 0) {
                     errorMessage.textContent = `üò• –ù–∞ –ª–∏—Å—Ç—ñ "${GAME_ROLES_SHEET_NAME}" –Ω–µ–º–∞—î —Ä–æ–ª–µ–π –¥–ª—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ "${difficulty}". –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–ª–æ–Ω–∫—É "${difficultyKey}".`;
                } else {
                     errorMessage.textContent = `üò• –õ–∏—Å—Ç "${GAME_ROLES_SHEET_NAME}" –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö.`;
                }
                return false;
            }
            
            if (allRoles.length < numPlayers) {
                errorMessage.textContent = `üò• –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ä–æ–ª–µ–π (${allRoles.length}) –Ω–∞ –ª–∏—Å—Ç—ñ "${GAME_ROLES_SHEET_NAME}" –¥–ª—è ${numPlayers} –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ —Ä—ñ–≤–Ω—ñ "${difficulty}".`;
                return false;
            }

            shuffleArray(allRoles); // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ä–æ–ª—ñ
            errorMessage.textContent = '';
            return true;

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–ª–µ–π:', error);
            errorMessage.textContent = `üö® –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–ª–µ–π: ${error.message}. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ cron-–∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î.`;
            return false;
        }
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    function startRoleAssignment() {
        currentPlayerIndexForRole = 0;
        assignedRoles = [];
        roleDisplayArea.classList.add('hidden');
        showRoleBtn.classList.remove('hidden');
        lookAwayText.classList.remove('hidden');
        assignRoleToNextPlayer();
        switchScreen('roleAssignment');
    }

    function assignRoleToNextPlayer() {
        if (currentPlayerIndexForRole < numPlayers) {
            playerTurnInfo.textContent = `ü§´ –ì—Ä–∞–≤–µ—Ü—å ${currentPlayerIndexForRole + 1}, –Ω–µ –ø—ñ–¥–≥–ª—è–¥–∞–π!`;
            currentRoleText.textContent = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ä–æ–ª—å
            roleDisplayArea.classList.add('hidden');
            showRoleBtn.classList.remove('hidden');
            lookAwayText.classList.remove('hidden');
        } else {
            // –í—Å—ñ —Ä–æ–ª—ñ —Ä–æ–∑–¥–∞–Ω—ñ, –ø–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É
            startGamePlay();
        }
    }

    showRoleBtn.addEventListener('click', () => {
        const role = allRoles[currentPlayerIndexForRole]; // –ë–µ—Ä–µ–º–æ —Ä–æ–ª—å –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è, —è–∫—â–æ –≥—Ä–∞–≤—Ü—ñ–≤ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ä–æ–ª–µ–π
        currentRoleText.textContent = role;
        assignedRoles.push({ player: currentPlayerIndexForRole + 1, role: role });

        roleDisplayArea.classList.remove('hidden');
        showRoleBtn.classList.add('hidden');
        lookAwayText.classList.add('hidden');
    });

    roleSeenBtn.addEventListener('click', () => {
        currentPlayerIndexForRole++;
        assignRoleToNextPlayer();
    });

    function startGamePlay() {
        switchScreen('gamePlay');
        timeLeft = 10 * 60; // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä
        updateTimerDisplay();
        timerInterval = setInterval(() => {
            timeLeft--;
            updateTimerDisplay();
            if (timeLeft <= 0) {
                endGame(false); // false - –Ω–µ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ
            }
        }, 1000);
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    function endGame(early = false) {
        clearInterval(timerInterval);
        if (!early && alarmSound.src) { // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∞–π–º–µ—Ä –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Å–∞–º
            alarmSound.play().catch(e => console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫:", e));
        }
        
        rolesRevealList.innerHTML = ''; // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
        assignedRoles.forEach(item => {
            const li = document.createElement('li');
            li.innerHTML = `<strong>–ì—Ä–∞–≤–µ—Ü—å ${item.player}:</strong> ${item.role}`;
            rolesRevealList.appendChild(li);
        });
        switchScreen('results');
    }

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    startGameBtn.addEventListener('click', async () => {
        numPlayers = parseInt(numPlayersInput.value);
        difficulty = difficultySelect.value;

        if (numPlayers < 2) {
            errorMessage.textContent = '–ú—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ!';
            return;
        }
        errorMessage.textContent = '';

        const rolesFetched = await fetchRoles();
        if (rolesFetched) {
            startRoleAssignment();
        }
    });

    endGameEarlyBtn.addEventListener('click', () => {
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (confirm("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ?")) {
            endGame(true); // true - –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ
        }
    });

    playAgainBtn.addEventListener('click', () => {
        // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
        allRoles = [];
        assignedRoles = [];
        currentPlayerIndexForRole = 0;
        clearInterval(timerInterval);
        timeLeft = 10 * 60;
        numPlayersInput.value = "2"; // –°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        difficultySelect.value = "Easy";

        switchScreen('setup');
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π –µ–∫—Ä–∞–Ω
    switchScreen('setup');
});