<?php
// telegram_handler.php
// –¶–µ–π —Ñ–∞–π–ª —Å–ª—É–≥—É—î —Ç–æ—á–∫–æ—é –≤—Ö–æ–¥—É –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram –±–æ—Ç–∞.

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è. –£ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –∫—Ä–∞—â–µ –ª–∏—à–µ –ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏.
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É.
define('ROOT_DIR', __DIR__);

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env.
require_once ROOT_DIR . '/includes/env-loader.php';
// –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ .env –ª–µ–∂–∏—Ç—å –Ω–∞ —Ä—ñ–≤–µ–Ω—å –≤–∏—â–µ ROOT_DIR (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∑–∞ public_html)
// –Ø–∫—â–æ .env –ª–µ–∂–∏—Ç—å –≤ ROOT_DIR, –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞ ROOT_DIR . '/.env'
loadEnv(ROOT_DIR . '/../.env');


// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, –≤–∫–ª—é—á–∞—é—á–∏ `custom_log` —Ç–∞ `readJsonFile`.
require_once ROOT_DIR . '/includes/functions.php';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Gemini API.
require_once ROOT_DIR . '/includes/gemini_api.php';

// –û—Ç—Ä–∏–º—É—î–º–æ Telegram Bot Token –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.
$telegramToken = getenv('TELEGRAM_TOKEN');

// --- NEW: Define Admin Chat ID ---
define('ADMIN_CHAT_ID', 1282207313); // –í–∞—à Telegram Chat ID

if (!$telegramToken) {
    custom_log('TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ .env. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –≤–µ–±—Ö—É–∫ Telegram.', 'telegram_error');
    http_response_code(500);
    die('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω Telegram.');
}

$input = file_get_contents('php://input');
$update = json_decode($input, true);

custom_log('–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram Webhook: ' . $input, 'telegram_webhook');

if (json_last_error() !== JSON_ERROR_NONE) {
    custom_log('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ JSON –∑ –≤–µ–±—Ö—É–∫–∞ Telegram: ' . json_last_error_msg(), 'telegram_error');
    http_response_code(400);
    die('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π JSON –≤–≤—ñ–¥.');
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ Telegram.
 * (–ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
 */
function sendTelegramMessage(int $chatId, string $text, string $telegramToken): void {
    $apiUrl = "https://api.telegram.org/bot{$telegramToken}/sendMessage";
    $postFields = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $apiUrl);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postFields));
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30); // –¢–∞–π–º-–∞—É—Ç –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $curlError = curl_error($ch);
    curl_close($ch);

    if ($response === false) {
        custom_log("–ü–æ–º–∏–ª–∫–∞ cURL –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Chat ID {$chatId}: " . $curlError, 'telegram_error');
    } elseif ($httpCode !== 200) {
        custom_log("Telegram API –ø–æ–≤–µ—Ä–Ω—É–≤ HTTP {$httpCode} –¥–ª—è Chat ID {$chatId}: " . $response, 'telegram_error');
    } else {
        custom_log("–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Chat ID {$chatId}", 'telegram_webhook');
    }
}


if (isset($update['message'])) {
    $message = $update['message'];
    $chatId = $message['chat']['id'];
    $text = trim($message['text'] ?? '');
    $lowerText = mb_strtolower($text); // –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É

    // --- NEW: Determine if the request is from an admin ---
    $is_admin_request = ($chatId == ADMIN_CHAT_ID);

    custom_log("–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Chat ID: {$chatId}. –¢–µ–∫—Å—Ç: '{$text}' (Admin: " . ($is_admin_request ? '–¢–∞–∫' : '–ù—ñ') . ")", 'telegram_webhook');

    $responseText = '';

    // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö/–ø—Ä–æ—Å—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –ü–ï–†–ï–î –≤–∏–∫–ª–∏–∫–æ–º LLM
    if (strpos($text, '/start') === 0) {
        $responseText = "–í—ñ—Ç–∞—é! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ –º–µ–Ω–µ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø–∏—Ç–∞–Ω–Ω—è, —Ä–∏—Å–∏ —á–∏ –±–µ–π–¥–∂–∏. –°–ø—Ä–æ–±—É–π—Ç–µ '/ask [–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è]' –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.";
    } elseif (strpos($text, '/help') === 0) {
        $responseText = "–Ø —Ä–æ–∑—É–º—ñ—é –∫—ñ–ª—å–∫–∞ –∫–æ–º–∞–Ω–¥: \n/start - –ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥.\n/help - –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É.\n/ask [–ø–∏—Ç–∞–Ω–Ω—è] –∞–±–æ –ø—Ä–æ—Å—Ç–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è - –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É.\n\n–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏:\n- '—Ö—Ç–æ —Ç–∏?' –∞–±–æ '–ø—Ä–æ –ø—Ä–æ–µ–∫—Ç' - –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–µ–Ω–µ.\n- '–ø–æ—Ä—ñ–≤–Ω—è–π [–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á1] —Ç–∞ [–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á2]' - –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.\n- '—è–∫—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É [–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á]?' - –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.";
    } elseif (strpos($text, '/test_log') === 0) {
        custom_log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {$chatId} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—É /test_log.", 'telegram_test');
        $responseText = "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ª–æ–≥. –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î, –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ –∑–∞–ø–∏—Å –≤ `logs/telegram_test.log`.";
    }
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–∏—Ç–∏ –ø—Ä–æ –±–æ—Ç–∞/–ø—Ä–æ–µ–∫—Ç - —Å—Ç–∞—Ç–∏—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    elseif (preg_match('/(—Ö—Ç–æ —Ç–∏\??|–ø—Ä–æ –ø—Ä–æ–µ–∫—Ç|—â–æ —Ü–µ –∑–∞ –±–æ—Ç\??|–ø—Ä–æ mindflow)/ui', $lowerText)) {
        $responseText = "–Ø –ú–∞—Å–∫–æ—Ç –ø—Ä–æ—î–∫—Ç—É –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ MindFlow! –Ø –∫—ñ—Ç (–∞–±–æ –∫—ñ—à–∫–∞, —è–∫ –≤–∞–º –±—ñ–ª—å—à–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è üòâ), –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–∞—Ä —ñ –ø–æ–º—ñ—á–Ω–∏–∫. –ú–æ—è —Ä–æ–±–æ—Ç–∞ - —à–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ç–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–∞–ø–∏—Ç—É–π—Ç–µ!";
    }
    // –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏, —è–∫—â–æ —Ü–µ –Ω–µ –ø—Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –∑–∞–ø–∏—Ç "–ø—Ä–æ –ø—Ä–æ–µ–∫—Ç"
    elseif (!empty($text)) {
        sendTelegramMessage($chatId, "–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –∑–∞–ø–∏—Ç, —Ö–≤–∏–ª–∏–Ω–∫—É... ü§ñ", $telegramToken);

        $geminiRoute = determineRelevantData($text);

        if (isset($geminiRoute['error'])) {
            $responseText = "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É: " . $geminiRoute['error'];
        } else {
            $fileType = $geminiRoute['file_type'];
            $targetUsernames = $geminiRoute['target_usernames'] ?? []; // –¢–µ–ø–µ—Ä —Ü–µ –º–∞—Å–∏–≤
            $followUpQuery = $geminiRoute['follow_up_query'];
            $contextData = null; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ null –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –±—É–ª–∏ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
            $contextDataJson = '';
            $dataLoadedSuccessfully = true; // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

            custom_log("LLM1 Route: file_type='{$fileType}', target_usernames=" . json_encode($targetUsernames) . ", query='{$followUpQuery}'", 'gemini_route');

            switch ($fileType) {
                case 'users':
                    $allUsersData = readJsonFile(ROOT_DIR . '/data/users.json');
                    $contextData = [];
                    foreach ($allUsersData as $user) {
                        unset($user['password_hash'], $user['password']);
                        $contextData[] = $user;
                    }
                    break;
                case 'questions':
                    $contextData = readJsonFile(ROOT_DIR . '/data/questions.json');
                    break;
                case 'traits':
                    $contextData = readJsonFile(ROOT_DIR . '/data/traits.json');
                    break;
                case 'badges':
                    $contextData = readJsonFile(ROOT_DIR . '/data/badges.json');
                    break;
                case 'user_answers': // –û–±—Ä–æ–±–ª—è—î –æ–¥–Ω–æ–≥–æ –∞–±–æ –¥–≤–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    if (empty($targetUsernames)) {
                        $responseText = "–î–ª—è –∑–∞–ø–∏—Ç—É —Ç–∏–ø—É 'user_answers' –Ω–µ –±—É–ª–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.";
                        $dataLoadedSuccessfully = false;
                        break;
                    }

                    $loadedUsersData = [];
                    foreach ($targetUsernames as $username) {
                        // --- UPDATED: Pass is_admin_request to loadUserData ---
                        $loadResult = loadUserData($username, $is_admin_request);
                        if ($loadResult['success']) {
                            $loadedUsersData[$username] = $loadResult['data'];
                        } else {
                            // If any user data fails to load (e.g., hidden results), set responseText and stop.
                            $responseText = $loadResult['message'];
                            $dataLoadedSuccessfully = false;
                            break 2; // Break out of both the foreach and the switch
                        }
                    }

                    if ($dataLoadedSuccessfully) { // Only proceed if all necessary users loaded successfully
                        if (count($targetUsernames) === 1) {
                            $contextData = reset($loadedUsersData); // Get the first (and only) user's data
                        } elseif (count($targetUsernames) === 2) {
                            // Ensure both users actually have data, even if loadUserData succeeded for one
                            $user1Data = $loadedUsersData[$targetUsernames[0]] ?? null;
                            $user2Data = $loadedUsersData[$targetUsernames[1]] ?? null;

                            if (empty($user1Data) || empty($user2Data)) {
                                $responseText = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, –∞–±–æ –æ–¥–∏–Ω –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.";
                                $dataLoadedSuccessfully = false;
                                break;
                            }

                            $contextData = [
                                'user1_data' => $user1Data,
                                'user2_data' => $user2Data,
                                'user1_username' => $targetUsernames[0],
                                'user2_username' => $targetUsernames[1]
                            ];
                        } else {
                             $responseText = "–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏: " . count($targetUsernames) . ". –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å 1 –∞–±–æ 2.";
                             $dataLoadedSuccessfully = false;
                        }
                    }
                    break;
                case 'none':
                default:
                    // –î–ª—è 'none' –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –∞–±–æ –≤—ñ–Ω –≤–∂–µ –≤–∫–ª—é—á–µ–Ω–∏–π —É followUpQuery
                    $contextData = ['info' => '–î–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –∑–∞–ø–∏—Ç—É –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.'];
                    break;
            }

            // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ (–∫—Ä—ñ–º —Ç–∏–ø—É 'none', –¥–µ —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
            if (!$dataLoadedSuccessfully) {
                // $responseText –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥ loadUserData
                custom_log("Data loading failed. Response: " . $responseText, 'telegram_webhook');
            } elseif (!empty($followUpQuery)) {
                // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ $contextData –Ω–µ null —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –ø–µ—Ä–µ–¥ json_encode, –æ—Å–æ–±–ª–∏–≤–æ –¥–ª—è file_type 'none'
                if ($contextData !== null && !empty($contextData) && !(count($contextData) === 1 && isset($contextData['info']))) { // Check if it's just the default 'info' context
                    $contextDataJson = json_encode($contextData, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
                    if (json_last_error() !== JSON_ERROR_NONE) {
                        custom_log("JSON encode error for contextData: " . json_last_error_msg(), 'telegram_error');
                        $responseText = "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –®–Ü.";
                        $dataLoadedSuccessfully = false; // –©–æ–± –Ω–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ getGeminiAnswer
                    }
                } else { // If contextData is null, empty, or only contains 'info'
                    if (empty($responseText)) { // Only set responseText if not already set by loadUserData or other logic
                        $responseText = "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –ú–æ–∂–ª–∏–≤–æ, –¥–∞–Ω—ñ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î.";
                    }
                    custom_log("No valid context data for LLM2. Context: " . json_encode($contextData) . " Response: " . $responseText, 'telegram_webhook');
                    $dataLoadedSuccessfully = false; // Prevent LLM2 call
                }

                if ($dataLoadedSuccessfully) { // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ, —è–∫—â–æ –≤—Å–µ —â–µ —É—Å–ø—ñ—à–Ω–æ
                    custom_log("Sending to LLM2: Query='{$followUpQuery}', Context (first 200 chars)='" . substr($contextDataJson, 0, 200) . "...'", 'gemini_request');
                    $finalAnswer = getGeminiAnswer($followUpQuery, $contextDataJson);
                    if ($finalAnswer) {
                        $responseText = $finalAnswer;
                    } else {
                        $responseText = "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –®–Ü. –ú–æ–∂–ª–∏–≤–æ, –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å–∫–ª–∞–¥–Ω–µ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞.";
                    }
                }
            } else {
                 // –Ø–∫—â–æ $responseText —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–º–∏–ª–∫–æ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)
                if (empty($responseText)) {
                    $responseText = "–ó–∞–ø–∏—Ç –Ω–µ –±—É–≤ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—Ç–æ—á–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–Ω—Ü–µ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –µ—Ç–∞–ø—ñ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É.";
                }
            }
        }
    } elseif (empty($text) && isset($message['message_id'])) { // –Ø–∫—â–æ —Ü–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ —î $message
        $responseText = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–æ–Ω–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.";
    }

    if (!empty($responseText)) {
        sendTelegramMessage($chatId, $responseText, $telegramToken);
    } else {
        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—Ä–æ–∂–Ω—è, –ª–æ–≥—É—î–º–æ, –∞–ª–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω—ñ—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        custom_log("No response generated for update (Chat ID: {$chatId}, Text: '{$text}'). Update: " . $input, 'telegram_webhook');
    }
    http_response_code(200);

} else {
    custom_log('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram. –í–º—ñ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ' . $input, 'telegram_webhook');
    http_response_code(200); // Telegram –æ—á—ñ–∫—É—î 200 OK, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ü–µ–π —Ç–∏–ø
}
?>
