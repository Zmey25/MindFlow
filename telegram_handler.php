<?php
// telegram_handler.php

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

define('ROOT_DIR', __DIR__);
define('DATA_DIR', ROOT_DIR . '/data');
define('ANSWERS_DIR_PATH', DATA_DIR . '/answers');
define('USERS_FILE_PATH', DATA_DIR . '/users.json');
define('QUESTIONS_FILE_PATH', DATA_DIR . '/questions.json');
define('TRAITS_FILE_PATH', DATA_DIR . '/traits.json');
define('BADGES_FILE_PATH', DATA_DIR . '/badges.json');

require_once ROOT_DIR . '/includes/env-loader.php';
loadEnv(ROOT_DIR . '/../.env');

require_once ROOT_DIR . '/includes/functions.php';
require_once ROOT_DIR . '/includes/gemini_api.php';

$telegramToken = getenv('TELEGRAM_TOKEN');

define('ADMIN_CHAT_ID', 1282207313);

if (!$telegramToken) {
    custom_log('TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ .env. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –≤–µ–±—Ö—É–∫ Telegram.', 'telegram_error');
    http_response_code(500);
    die('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω Telegram.');
}

$input = file_get_contents('php://input');
$update = json_decode($input, true);

custom_log('–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram Webhook: ' . $input, 'telegram_webhook');

if (json_last_error() !== JSON_ERROR_NONE) {
    custom_log('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ JSON –∑ –≤–µ–±—Ö—É–∫–∞ Telegram: ' . json_last_error_msg(), 'telegram_error');
    http_response_code(400);
    die('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π JSON –≤–≤—ñ–¥.');
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ Telegram.
 */
function sendTelegramMessage(int $chatId, string $text, string $telegramToken): void {
    $apiUrl = "https://api.telegram.org/bot{$telegramToken}/sendMessage";
    $postFields = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $apiUrl);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postFields));
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $curlError = curl_error($ch);
    curl_close($ch);

    if ($response === false) {
        custom_log("–ü–æ–º–∏–ª–∫–∞ cURL –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Chat ID {$chatId}: " . $curlError, 'telegram_error');
    } elseif ($httpCode !== 200) {
         $responseBody = is_string($response) ? $response : json_encode($response);
        custom_log("Telegram API –ø–æ–≤–µ—Ä–Ω—É–≤ HTTP {$httpCode} –¥–ª—è Chat ID {$chatId}: " . $responseBody, 'telegram_error');
    } else {
        custom_log("–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Chat ID {$chatId}", 'telegram_webhook');
    }
}


if (isset($update['message'])) {
    $message = $update['message'];
    $chatId = $message['chat']['id'];
    $text = trim($message['text'] ?? '');
    $lowerText = mb_strtolower($text);

    $is_admin_request = ($chatId == ADMIN_CHAT_ID);

    custom_log("–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Chat ID: {$chatId}. –¢–µ–∫—Å—Ç: '{$text}' (Admin: " . ($is_admin_request ? '–¢–∞–∫' : '–ù—ñ') . ")", 'telegram_webhook');

    $responseText = '';

    if (strpos($text, '/start') === 0) {
        $responseText = "–í—ñ—Ç–∞—é! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ –º–µ–Ω–µ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø–∏—Ç–∞–Ω–Ω—è, —Ä–∏—Å–∏ —á–∏ –±–µ–π–¥–∂–∏. –°–ø—Ä–æ–±—É–π—Ç–µ '/ask [–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è]' –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.";
    } elseif (strpos($text, '/help') === 0) {
        $responseText = "–Ø —Ä–æ–∑—É–º—ñ—é –∫—ñ–ª—å–∫–∞ –∫–æ–º–∞–Ω–¥: \n/start - –ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥.\n/help - –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É.\n/ask [–ø–∏—Ç–∞–Ω–Ω—è] –∞–±–æ –ø—Ä–æ—Å—Ç–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è - –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É.\n\n–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏:\n- '—Ö—Ç–æ —Ç–∏?' –∞–±–æ '–ø—Ä–æ –ø—Ä–æ–µ–∫—Ç' - –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–µ–Ω–µ.\n- '–ø–æ—Ä—ñ–≤–Ω—è–π [–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á1] —Ç–∞ [–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á2]' - –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.\n- '—è–∫—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É [–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á]?' - –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.";
    } elseif (strpos($text, '/test_log') === 0) {
        custom_log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {$chatId} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—É /test_log.", 'telegram_test');
        $responseText = "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ª–æ–≥. –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î, –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ –∑–∞–ø–∏—Å –≤ `logs/telegram_test.log`.";
    }
    elseif (preg_match('/(—Ö—Ç–æ —Ç–∏\??|–ø—Ä–æ –ø—Ä–æ–µ–∫—Ç|—â–æ —Ü–µ –∑–∞ –±–æ—Ç\??|–ø—Ä–æ mindflow)/ui', $lowerText)) {
        $responseText = "–Ø –ú–∞—Å–∫–æ—Ç –ø—Ä–æ—î–∫—Ç—É –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ MindFlow! –Ø –∫—ñ—Ç (–∞–±–æ –∫—ñ—à–∫–∞, —è–∫ –≤–∞–º –±—ñ–ª—å—à–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è üòâ), –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–∞—Ä —ñ –ø–æ–º—ñ—á–Ω–∏–∫. –ú–æ—è —Ä–æ–±–æ—Ç–∞ - —à–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ç–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–∞–ø–∏—Ç—É–π—Ç–µ!";
    }
    elseif (!empty($text)) {
        sendTelegramMessage($chatId, "ü§ñ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –∑–∞–ø–∏—Ç —ñ –≥–æ—Ç—É—é –¥–∞–Ω—ñ, —Ö–≤–∏–ª–∏–Ω–∫—É...", $telegramToken);

        custom_log("Calling determineRelevantData with query: '{$text}'", 'telegram_webhook');
        $geminiRouteResult = determineRelevantData($text);

        if (isset($geminiRouteResult['error'])) {
            $responseText = "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É (LLM1): " . $geminiRouteResult['error'];
            custom_log("LLM1 routing error: " . $responseText, 'telegram_error');
        } else {
            $potentialDataSources = $geminiRouteResult['potential_data_sources'];
            $targetUsernames = $geminiRouteResult['target_usernames'];
            $refinedQuery = $geminiRouteResult['refined_query'];

            custom_log("LLM1 Route Result: potential_data_sources=" . json_encode($potentialDataSources) . ", target_usernames=" . json_encode($targetUsernames) . ", refined_query='{$refinedQuery}'", 'telegram_webhook');

            $contextData = [];
            $dataLoadingError = null;

            custom_log("Starting data loading based on potential_data_sources: " . json_encode($potentialDataSources), 'telegram_webhook');

            $loadedUserDataSets = [];
            $failedUsernames = [];
            $userAnswersRequested = in_array('user_answers', $potentialDataSources);

            if ($userAnswersRequested) {
                 if (empty($targetUsernames)) {
                     $dataLoadingError = "–ó–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(—ñ–≤), –∞–ª–µ –®–Ü –Ω–µ –≤–∏–∑–Ω–∞—á–∏–≤ –∂–æ–¥–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.";
                     custom_log($dataLoadingError, 'telegram_error');
                 } else {
                    foreach ($targetUsernames as $username) {
                         $loadResult = loadUserData($username, $is_admin_request);
                         if ($loadResult['success']) {
                             // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏—Å–ª–∏–π –≤–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                             $loadedUserDataSets[$username] = summarizeUserData($loadResult['data']);
                         } else {
                             custom_log("Failed to load data for user '{$username}': " . $loadResult['message'], 'telegram_error');
                             $failedUsernames[] = $username . " (" . $loadResult['message'] . ")";
                         }
                    }

                    if (!empty($failedUsernames)) {
                         $dataLoadingError = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: " . implode(", ", $failedUsernames) . ".";
                         if (empty($loadedUserDataSets)) {
                             custom_log("No target user data loaded. Setting dataLoadingError: " . $dataLoadingError, 'telegram_error');
                         } else {
                             custom_log("Some target user data failed to load, but others succeeded. Message: " . $dataLoadingError, 'telegram_warning');
                         }
                    }

                     if (!empty($loadedUserDataSets)) {
                        if (count($loadedUserDataSets) === 1) {
                            $contextData['user_data'] = reset($loadedUserDataSets);
                            custom_log("Added 1 summarized user data set to context.", 'telegram_webhook');
                        } elseif (count($loadedUserDataSets) === 2) {
                            $usernamesLoaded = array_keys($loadedUserDataSets);
                             $contextData['comparison_data'] = [
                                'user1_data' => $loadedUserDataSets[$usernamesLoaded[0]],
                                'user2_data' => $loadedUserDataSets[$usernamesLoaded[1]],
                                'user1_username' => $usernamesLoaded[0],
                                'user2_username' => $usernamesLoaded[1]
                             ];
                            custom_log("Added 2 summarized user data sets for comparison to context.", 'telegram_webhook');
                        } else {
                             $dataLoadingError = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (" . count($loadedUserDataSets) . "). –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å 1 –∞–±–æ 2.";
                             custom_log($dataLoadingError, 'telegram_error');
                        }
                     }
                 }
            }

            foreach ($potentialDataSources as $sourceType) {
                 if ($sourceType === 'user_answers' || $sourceType === 'none') {
                     continue;
                 }

                switch ($sourceType) {
                    case 'users':
                        $allUsersData = readJsonFile(USERS_FILE_PATH);
                        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏—Å–ª–∏–π –≤–∏–∫–ª–∞–¥ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                        $contextData['all_users_list'] = summarizeUsersList($allUsersData);
                        custom_log("Loaded and summarized 'users' list data.", 'telegram_webhook');
                        break;
                    case 'questions':
                        $contextData['all_questions'] = readJsonFile(QUESTIONS_FILE_PATH);
                         custom_log("Loaded 'questions' data.", 'telegram_webhook');
                        break;
                    case 'traits':
                        $contextData['all_traits'] = readJsonFile(TRAITS_FILE_PATH);
                         custom_log("Loaded 'traits' data.", 'telegram_webhook');
                        break;
                    case 'badges':
                        $contextData['all_badges'] = readJsonFile(BADGES_FILE_PATH);
                         custom_log("Loaded 'badges' data.", 'telegram_webhook');
                        break;
                    default:
                        custom_log("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥ LLM1 –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {$sourceType}", 'telegram_warning');
                        break;
                }
            }


            custom_log("Proceeding to LLM2. Data loading error: " . ($dataLoadingError ?? 'None'), 'telegram_webhook');

            if (($userAnswersRequested && empty($loadedUserDataSets)) ||
                 (empty($contextData) && !in_array('none', $potentialDataSources)) ||
                 empty($refinedQuery) )
            {
                if ($dataLoadingError === null) {
                    $dataLoadingError = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç. –ú–æ–∂–ª–∏–≤–æ, —Ñ–∞–π–ª–∏ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ.";
                    custom_log("General data loading failure or empty context for non-'none' request.", 'telegram_error');
                }
                $responseText = "–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö: " . $dataLoadingError . " " .
                                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç.";

            } else {
                $contextDataJson = json_encode($contextData, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);

                if (json_last_error() !== JSON_ERROR_NONE) {
                     custom_log("JSON encode error for contextData for LLM2: " . json_last_error_msg(), 'telegram_error');
                     $responseText = "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –®–Ü –∞–Ω–∞–ª—ñ–∑—É.";
                } else {
                    custom_log("Calling getGeminiAnswer with refinedQuery='{$refinedQuery}' and summarized context...", 'telegram_webhook');
                    $finalAnswer = getGeminiAnswer($refinedQuery, $contextDataJson);

                    if ($finalAnswer) {
                        if ($dataLoadingError !== null) {
                            $responseText = "‚ö†Ô∏è –ß–∞—Å—Ç–∏–Ω–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: " . $dataLoadingError . "\n\n" . $finalAnswer;
                             custom_log("Added partial data error to LLM2 response.", 'telegram_warning');
                        } else {
                             $responseText = $finalAnswer;
                        }

                    } else {
                        $responseText = "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –®–Ü –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ (LLM2). –ú–æ–∂–ª–∏–≤–æ, –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å–∫–ª–∞–¥–Ω–µ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –®–Ü.";
                         custom_log("LLM2 returned empty response.", 'telegram_error');
                    }
                }
            }
        }
    } elseif (empty($text) && isset($update['message']['message_id'])) {
        $responseText = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–æ–Ω–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.";
        custom_log("Received non-text message.", 'telegram_webhook');
    }

function splitHtmlMessageFlexible(string $html, int $limit, string $allowed_tags): array
{
    $tag_list = trim(str_replace(['<', '>'], ['', '|'], $allowed_tags), '|');
    if (empty($tag_list)) {
        return explode("\n", wordwrap($html, $limit, "\n", true));
    }

    $regex = '/<(' . $tag_list . ')( [^>]*)?>$/i';
    
    $chunks = explode("\n", wordwrap($html, $limit, "\n", true));
    $chunkCount = count($chunks);

    for ($i = 0; $i < $chunkCount - 1; $i++) {
        if (preg_match($regex, $chunks[$i], $matches)) {
            $openingTag = $matches[0];
            $tagName = $matches[1];
            $closingTag = "</$tagName>";

            if (str_starts_with(ltrim($chunks[$i + 1]), $closingTag)) {
                $chunks[$i] = substr($chunks[$i], 0, -strlen($openingTag));
                $chunks[$i + 1] = ltrim(substr_replace($chunks[$i + 1], '', 0, strlen($closingTag)));
            }
        }
    }
    return array_filter($chunks);
}

    if (!empty($responseText)) {
        $allowed_tags = '<b><i><u><s><a><code><pre>';
        $sanitizedResponse = strip_tags($responseText, $allowed_tags);
        $limit = 4000;
        
        if (mb_strlen($sanitizedResponse, 'UTF-8') > $limit) {
            $messages = splitHtmlMessageFlexible($sanitizedResponse, $limit, $allowed_tags);
            foreach ($messages as $messagePart) {
                sendTelegramMessage($chatId, $messagePart, $telegramToken);
                usleep(700000);
            }
        } else {
            sendTelegramMessage($chatId, $sanitizedResponse, $telegramToken);
        }
    } else {
        custom_log("No response generated for update (Chat ID: {$chatId}, Text: '{$text}'). Update: " . $input, 'telegram_webhook');
    }
    http_response_code(200);

} else {
    custom_log('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram. –í–º—ñ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ' . $input, 'telegram_webhook');
    http_response_code(200);
}
?>
